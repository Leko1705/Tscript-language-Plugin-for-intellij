{
  parserClass="com.tscript.ide.parser.TestParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Test"
  psiImplClassSuffix="Impl"
  psiPackage="com.tscript.ide.psi"
  psiImplPackage="com.tscript.ide.psi.impl"

  elementTypeHolderClass="com.tscript.ide.psi.TestTypes"
  elementTypeClass="com.tscript.ide.psi.TestElementType"
  tokenTypeClass="com.tscript.ide.psi.TestTokenType"

  extends(".*expr")=expr
}

file ::= (BLOCK_COMMENT | COMMENT | definition | stmt)* {recoverWhile=recover_global}

chainable_identifier ::= identifier (DOT identifier)* {recoverWhile=recover_global}

definition ::= function_def | namespace_def | class_def

namespace_def ::= STATIC? NAMESPACE IDENT CURLY_OPEN definition* CURLY_CLOSE {
    pin=3
    mixin="com.tscript.ide.psi.MixinElements.TestNSpaceDefMixin"
    implements="com.tscript.ide.psi.MixinElements.TestNSpaceDef"
    methods=[getName getNameIdentifier getStaticElement]
}

function_def ::= (STATIC | OVERRIDDEN | NATIVE | ABSTRACT)? FUNCTION IDENT (SEMI | params block) {
    pin=2
    mixin="com.tscript.ide.psi.MixinElements.TestFunctionDefMixin"
    implements="com.tscript.ide.psi.MixinElements.TestFunctionDef"
    methods=[getName setName getNameIdentifier getStaticElement getOverriddenElement getNativeElement getAbstractElement]
}
private params ::= PAREN_OPEN PAREN_CLOSE | PAREN_OPEN param_list PAREN_CLOSE
private param_list ::= param (COMMA param)* {recoverWhile=recover_params}
param ::= CONST? IDENT (ASSIGN expr)? {
   pin=1
   mixin="com.tscript.ide.psi.MixinElements.ParameterMixin"
   implements="com.tscript.ide.psi.MixinElements.ParameterDef"
   methods=[getName setName getNameIdentifier isConstant]
 }

class_def ::= (ABSTRACT | STATIC)? CLASS IDENT (COLON chainable_identifier)? class_body_def {
    pin=2
    mixin="com.tscript.ide.psi.MixinElements.TestClassDefMixin"
    implements="com.tscript.ide.psi.MixinElements.TestClassDef"
    methods=[getName getNameIdentifier getSuper getAbstractElement getStaticElement]
}

class_body_def ::= CURLY_OPEN CURLY_CLOSE | CURLY_OPEN class_body CURLY_CLOSE
private class_body ::= visibility (
visibility | definition | constructor_def | var_dec | const_dec)* {recoverWhile=recover_class}

constructor_def ::= OVERRIDDEN? CONSTRUCTOR params (COLON SUPER call)? block {pin=2}
visibility ::= (PUBLIC | PRIVATE | PROTECTED) COLON {
    pin=1
    mixin="com.tscript.ide.psi.MixinElements.VisibilityMixin"
    implements="com.tscript.ide.psi.MixinElements.Visibility"
    methods=[getName setName getNameIdentifier]
}

stmt ::= var_dec | const_dec | block | SEMI | if_else | while_do | do_while
| for_loop | try_catch | throw_stmt | break_stmt | continue_stmt | anon_function | return_stmt
| from_import | import_stmt | from_use | use_stmt | expr_stmt

var_dec ::= STATIC? VAR var_list SEMI {
    pin=2
    implements="com.tscript.ide.psi.MixinElements.StaticAccessor"
    mixin="com.tscript.ide.psi.MixinElements.VarDefListMixin"
}

private var_list ::= single_var (COMMA single_var)* {recoverWhile=recover_stmt}
single_var ::= IDENT (ASSIGN expr)? {
   pin=1
   mixin="com.tscript.ide.psi.MixinElements.VariableDefMixin"
   implements="com.tscript.ide.psi.MixinElements.VariableDef"
   methods=[getName setName getNameIdentifier]
}

const_dec ::= STATIC? CONST const_list SEMI {
    pin=2
    implements="com.tscript.ide.psi.MixinElements.StaticAccessor"
    mixin="com.tscript.ide.psi.MixinElements.VarDefListMixin"
}
private const_list ::= single_const (COMMA single_const)* {recoverWhile=recover_stmt}
single_const ::= IDENT ASSIGN expr {
  pin=2
  mixin="com.tscript.ide.psi.MixinElements.VariableDefMixin"
  implements="com.tscript.ide.psi.MixinElements.VariableDef"
  methods=[getName setName getNameIdentifier]
}

block ::= CURLY_OPEN stmt_list CURLY_CLOSE {pin=1}
private stmt_list ::= stmt* {recoverWhile=recover_stmt}
import_stmt ::= IMPORT chainable_identifier SEMI {pin=1}
from_import ::= FROM chainable_identifier IMPORT chainable_identifier SEMI {pin=1}
use_stmt ::= USE NAMESPACE chainable_identifier SEMI {pin=1}
from_use ::= FROM chainable_identifier USE NAMESPACE chainable_identifier SEMI {pin=1}
if_else ::= IF expr THEN stmt (ELSE stmt)? {pin=1}
while_do ::= WHILE expr DO stmt {pin=1}
do_while ::= DO stmt WHILE expr SEMI {pin=1}
for_loop ::= FOR (VAR IDENT IN)? expr DO stmt {
    pin=1
    mixin="com.tscript.ide.psi.MixinElements.ForLoopMixin"
    implements="com.tscript.ide.psi.MixinElements.ForLoop"
    methods=[getName setName getNameIdentifier]
}
try_catch ::= TRY stmt CATCH VAR IDENT DO stmt {
    pin=1
    mixin="com.tscript.ide.psi.MixinElements.TryCatchMixin"
    implements="com.tscript.ide.psi.MixinElements.TryCatch"
    methods=[getName setName getNameIdentifier]
}
throw_stmt ::= THROW expr SEMI {pin=1}
return_stmt ::= RETURN expr? SEMI {pin=1}
break_stmt ::= BREAK SEMI {pin=1}
continue_stmt ::= CONTINUE SEMI {pin=1}
private expr_stmt ::= expr SEMI {pin=1}
private anon_function ::= FUNCTION function_def {pin=1}

expr ::= assign_expr

assign_expr ::= and_expr assign_op assign_expr | and_expr
assign_op ::= ASSIGN | ADD_ASSIGN | SUB_ASSIGN | MUL_ASSIGN
| DIV_ASSIGN | IDIV_ASSIGN | MOD_ASSIGN | POW_ASSIGN | SAL_ASSIGN | SAR_ASSIGN | SLR_ASSIGN
{
    implements="com.tscript.ide.psi.MixinElements.Operation"
    mixin="com.tscript.ide.psi.MixinElements.OperationMixin"
    methods=[findChildByType]
}

and_expr ::= or_expr (AND and_expr)*
or_expr ::= xor_expr (OR or_expr)*
xor_expr ::= eq_expr (XOR xor_expr)*

eq_expr ::= comp_expr (eq_op eq_expr)*
eq_op ::= EQUALS | NOT_EQUALS
{
    implements="com.tscript.ide.psi.MixinElements.Operation"
    mixin="com.tscript.ide.psi.MixinElements.OperationMixin"
    methods=[findChildByType]
}

comp_expr ::= shift_expr (comp_op comp_expr)*
comp_op ::= GT | GEQ | LT | LEQ | TYPEOF
{
    implements="com.tscript.ide.psi.MixinElements.Operation"
    mixin="com.tscript.ide.psi.MixinElements.OperationMixin"
    methods=[findChildByType]
}

shift_expr ::= plus_expr (shift_op shift_expr)*
shift_op ::= SAL | SAR | SLR
{
    implements="com.tscript.ide.psi.MixinElements.Operation"
    mixin="com.tscript.ide.psi.MixinElements.OperationMixin"
    methods=[findChildByType]
}

plus_expr ::= mul_expr (plus_op plus_expr)*
plus_op ::= ADD | SUB
{
    implements="com.tscript.ide.psi.MixinElements.Operation"
    mixin="com.tscript.ide.psi.MixinElements.OperationMixin"
    methods=[findChildByType]
}

mul_expr ::= pow_expr (mul_op mul_expr)*
mul_op ::= MUL | DIV | IDIV | MOD
{
    implements="com.tscript.ide.psi.MixinElements.Operation"
    mixin="com.tscript.ide.psi.MixinElements.OperationMixin"
    methods=[findChildByType]
}

pow_expr ::= range_expr (POW pow_expr)*

range_expr ::= unary_expr (COLON unary_expr)?

unary_expr ::= primary_expr (mem_access | container_access | call)* {pin=1}

mem_access ::= DOT IDENT {
    pin=1
    mixin="com.tscript.ide.psi.MixinElements.IdentifierMixin"
    implements="com.tscript.ide.psi.MixinElements.IdentifierDef"
    methods=[getName setName getNameIdentifier]
}

container_access ::= BRACKET_OPEN expr BRACKET_CLOSE {pin=1}
call ::= PAREN_OPEN arg_list PAREN_CLOSE {pin=1}
arg_list ::= (arg (COMMA arg)*)? {recoverWhile=recover_params}
arg ::= (IDENT ASSIGN)? expr

private primary_expr ::= literal_expr | array_expr | dictionary_expr
| lambda_expr | typeof_prefix_expr | not_expr | negation_expr | posivation_expr


private literal_expr ::= bool_expr | integer_expr | real_expr | null_expr
| string_expr | this_expr | identifier | super_access | paren_expression
bool_expr ::= TRUE | FALSE
integer_expr ::= INTEGER
real_expr ::= REAL
null_expr ::= NULL
string_expr ::= STRING
this_expr ::= THIS
identifier ::= IDENT {
  mixin="com.tscript.ide.psi.MixinElements.IdentifierMixin"
  implements="com.tscript.ide.psi.MixinElements.IdentifierDef"
  methods=[getName setName getNameIdentifier]
}
super_access ::= SUPER DOT IDENT {
     pin=1
     mixin="com.tscript.ide.psi.MixinElements.SuperMemAccessMixin"
     implements="com.tscript.ide.psi.MixinElements.SuperMemAccess"
     methods=[getName setName getNameIdentifier]
}
private paren_expression ::= PAREN_OPEN expr PAREN_CLOSE

typeof_prefix_expr ::= TYPEOF literal_expr
not_expr ::= NOT literal_expr
negation_expr ::= SUB literal_expr
posivation_expr ::= ADD literal_expr

array_expr ::= BRACKET_OPEN BRACKET_CLOSE | BRACKET_OPEN array_content BRACKET_CLOSE
private array_content ::= expr (COMMA expr)* {recoverWhile=recover_array}


dictionary_expr ::= CURLY_OPEN CURLY_CLOSE | CURLY_OPEN dictionary_content CURLY_CLOSE
private dictionary_content ::= dictionary_entry (COMMA dictionary_entry)* {recoverWhile=recover_dictionary}
dictionary_entry ::= expr COLON expr {pin=1}

lambda_expr ::= FUNCTION closures? params block {pin=1}
private closures ::= BRACKET_OPEN BRACKET_CLOSE | BRACKET_OPEN closure_list BRACKET_CLOSE
private closure_list ::= closure (COMMA closure)* {recoverWhile=recover_array}
closure ::= IDENT (ASSIGN expr)? {
    pin = 1
    mixin="com.tscript.ide.psi.MixinElements.ClosureMixin"
    implements="com.tscript.ide.psi.MixinElements.Closure"
    methods=[getName setName getNameIdentifier]
}

private recover_global ::= !(SEMI | CURLY_CLOSE | FUNCTION | NATIVE | CLASS | NAMESPACE | VAR | CONST | CURLY_OPEN)
private recover_stmt ::= !(SEMI | CURLY_CLOSE)
private recover_params ::= !(PAREN_CLOSE | COMMA | SEMI)
private recover_array ::= !(BRACKET_CLOSE | COMMA | SEMI)
private recover_dictionary ::= !(CURLY_CLOSE | COMMA | SEMI)
private recover_class ::= !(COLON | PUBLIC | PROTECTED | PRIVATE | CONSTRUCTOR | CURLY_CLOSE | SEMI)
