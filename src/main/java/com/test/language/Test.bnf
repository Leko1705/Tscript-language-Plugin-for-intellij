{
  parserClass="com.test.language.parser.TestParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Test"
  psiImplClassSuffix="Impl"
  psiPackage="com.test.language.psi"
  psiImplPackage="com.test.language.psi.impl"

  elementTypeHolderClass="com.test.language.psi.TestTypes"
  elementTypeClass="com.test.language.psi.TestElementType"
  tokenTypeClass="com.test.language.psi.TestTokenType"
}

file ::= (COMMENT | definition)*

modifiers ::= modifier*
private modifier ::= PUBLIC | PRIVATE | PROTECTED | NATIVE | OVERRIDDEN

private definition ::= modifiers (FUNCTION function_def | NAMESPACE namespace_def)

namespace_def ::= IDENT CURLY_OPEN definition* CURLY_CLOSE

function_def ::= IDENT params block
params ::= PAREN_OPEN PAREN_CLOSE | PAREN_OPEN param_list PAREN_CLOSE
private param_list ::= param (COMMA param)* {recoverWhile=recover_params}
param ::= CONST? IDENT {pin=1}

block ::= CURLY_OPEN stmt_list CURLY_CLOSE

stmt_list ::= stmt* {recoverWhile=recover_semi_or_curly_open}
private stmt ::= var_dec | SEMI
var_dec ::= VAR IDENT (ASSIGN NUM)? SEMI {pin=1}

private recover_semi_or_curly_open ::= !(SEMI | CURLY_CLOSE)
private recover_params ::= !(PAREN_CLOSE | COMMA)
