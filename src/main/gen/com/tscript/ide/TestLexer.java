// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Test.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.tscript.ide;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tscript.ide.psi.TestTypes;
import com.intellij.psi.TokenType;


class TestLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\123\u0100\1\u0a00\4\u0100\1\u1500"+
    "\10\u0100\1\u1600\2\u0100\1\u1700\1\u1800\1\u1400\1\u0100\1\u0500"+
    "\1\u0100\1\u1900\1\u1600\1\u0900\3\u0100\1\u1300\1\u1a00\114\u0100"+
    "\1\u1b00\1\u1300\153\u0100\1\u1c00\11\u0100\1\u1d00\1\u1400\6\u0100"+
    "\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\1\2\2\22\0\1\1\1\3"+
    "\1\4\1\5\1\0\1\6\2\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\6\21"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\2\0\6\30"+
    "\24\31\1\32\1\0\1\33\1\34\1\35\1\0\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\31\1\44\1\45"+
    "\1\31\1\46\1\47\1\50\1\51\1\52\1\53\1\31"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\31\1\64\1\0\1\65\7\0\1\1\32\0\1\1"+
    "\u01bf\0\12\66\206\0\12\66\306\0\12\66\234\0\12\66"+
    "\166\0\12\66\140\0\12\66\166\0\12\66\106\0\12\66"+
    "\u0116\0\12\66\106\0\12\66\346\0\1\1\u015f\0\12\66"+
    "\46\0\12\66\u012c\0\12\66\200\0\12\66\246\0\12\66"+
    "\6\0\12\66\266\0\12\66\126\0\12\66\206\0\12\66"+
    "\6\0\12\66\246\0\13\1\35\0\2\1\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\u01cf\0\12\66\46\0\12\66"+
    "\306\0\12\66\26\0\12\66\126\0\12\66\u0196\0\12\66"+
    "\246\0\12\66\206\0\12\66\u012c\0\12\66\200\0\12\66"+
    "\74\0\12\66\220\0\12\66\166\0\12\66\146\0\12\66"+
    "\206\0\12\66\106\0\12\66\266\0\12\66\u0164\0\62\66"+
    "\100\0\12\66\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7680];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\21\23\1\27\1\30\1\31\1\0\1\32\2\3\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\15\3\0"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\6\23\1\50"+
    "\5\23\1\51\1\23\1\52\3\23\1\53\15\23\1\0"+
    "\1\3\1\54\3\15\1\55\1\56\1\57\1\23\1\60"+
    "\6\23\1\61\5\23\1\62\14\23\1\63\1\23\1\64"+
    "\1\65\1\23\1\66\1\0\1\67\1\70\6\23\1\71"+
    "\1\23\1\72\4\23\1\73\7\23\1\74\1\75\1\23"+
    "\1\76\2\23\1\67\1\23\1\77\1\100\1\101\1\102"+
    "\1\23\1\103\12\23\1\104\1\105\1\23\1\106\4\23"+
    "\1\107\1\23\1\110\3\23\1\111\1\112\1\113\1\114"+
    "\6\23\1\115\1\23\1\116\1\23\1\117\1\120\4\23"+
    "\1\121\1\23\1\122\1\23\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\67"+
    "\0\67\0\u0181\0\u01b8\0\67\0\u01ef\0\u0226\0\u025d\0\u0294"+
    "\0\u02cb\0\67\0\67\0\u0302\0\u0339\0\u0370\0\u03a7\0\67"+
    "\0\67\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528"+
    "\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0"+
    "\0\u0717\0\u074e\0\u0785\0\67\0\67\0\67\0\334\0\67"+
    "\0\u07bc\0\u07f3\0\67\0\67\0\67\0\67\0\u0226\0\u082a"+
    "\0\67\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\67\0\67"+
    "\0\67\0\u0974\0\67\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u03a7\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u03a7"+
    "\0\u0c08\0\u03a7\0\u0c3f\0\u0c76\0\u0cad\0\u03a7\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\67\0\u0898\0\u08cf"+
    "\0\u0906\0\67\0\67\0\u101d\0\u1054\0\u03a7\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u03a7\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u03a7\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u03a7"+
    "\0\u157c\0\u03a7\0\u03a7\0\u15b3\0\u03a7\0\u15ea\0\u07f3\0\67"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u03a7\0\u176b"+
    "\0\u03a7\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u03a7\0\u187e\0\u18b5"+
    "\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u03a7\0\u03a7\0\u19ff"+
    "\0\u03a7\0\u1a36\0\u1a6d\0\u0faf\0\u1aa4\0\u03a7\0\u03a7\0\u03a7"+
    "\0\u1adb\0\u1b12\0\u03a7\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25"+
    "\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u03a7\0\u03a7\0\u1d6f"+
    "\0\u03a7\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u03a7\0\u1e82\0\u03a7"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u03a7\0\u03a7\0\u03a7\0\u03a7\0\u1f5e"+
    "\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u03a7\0\u20a8\0\u03a7"+
    "\0\u20df\0\u03a7\0\u03a7\0\u2116\0\u214d\0\u2184\0\u21bb\0\u03a7"+
    "\0\u21f2\0\u03a7\0\u2229\0\u03a7\0\u03a7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\3\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\27\1\30\1\31"+
    "\1\32\1\27\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\27\1\41\3\27\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\27\1\54\1\55"+
    "\1\21\70\0\2\3\112\0\1\56\40\0\4\57\1\60"+
    "\62\57\2\61\1\0\6\61\1\62\55\61\26\0\1\63"+
    "\66\0\1\64\66\0\1\65\66\0\1\66\57\0\4\67"+
    "\43\0\1\67\16\0\1\70\7\0\1\71\55\0\1\67"+
    "\1\0\4\21\12\0\1\72\1\0\1\73\12\0\1\74"+
    "\7\0\1\75\3\0\1\21\15\0\1\67\1\0\4\21"+
    "\12\0\1\72\30\0\1\21\25\0\1\76\1\77\66\0"+
    "\1\100\66\0\1\101\1\102\56\0\4\27\5\0\2\27"+
    "\3\0\27\27\31\0\1\103\57\0\4\27\5\0\2\27"+
    "\3\0\2\27\1\104\11\27\1\105\12\27\22\0\4\27"+
    "\5\0\2\27\3\0\17\27\1\106\7\27\22\0\4\27"+
    "\5\0\2\27\3\0\1\27\1\107\10\27\1\110\2\27"+
    "\1\111\11\27\22\0\4\27\5\0\2\27\3\0\15\27"+
    "\1\112\11\27\22\0\4\27\5\0\2\27\3\0\12\27"+
    "\1\113\14\27\22\0\4\27\5\0\2\27\3\0\1\27"+
    "\1\114\13\27\1\115\1\27\1\116\2\27\1\117\4\27"+
    "\22\0\4\27\5\0\2\27\3\0\6\27\1\120\4\27"+
    "\1\121\1\122\12\27\22\0\4\27\5\0\2\27\3\0"+
    "\1\27\1\123\13\27\1\124\4\27\1\125\4\27\22\0"+
    "\4\27\5\0\2\27\3\0\17\27\1\126\3\27\1\127"+
    "\3\27\22\0\4\27\5\0\2\27\3\0\17\27\1\130"+
    "\2\27\1\131\4\27\22\0\4\27\5\0\2\27\3\0"+
    "\5\27\1\132\21\27\22\0\4\27\5\0\2\27\3\0"+
    "\21\27\1\133\1\134\4\27\22\0\4\27\5\0\2\27"+
    "\3\0\7\27\1\135\7\27\1\136\6\27\1\137\22\0"+
    "\4\27\5\0\2\27\3\0\20\27\1\140\6\27\22\0"+
    "\4\27\5\0\2\27\3\0\1\27\1\141\25\27\22\0"+
    "\4\27\5\0\2\27\3\0\7\27\1\142\17\27\22\0"+
    "\4\27\5\0\2\27\3\0\15\27\1\143\11\27\3\0"+
    "\2\61\1\0\64\61\2\62\1\144\6\62\1\145\55\62"+
    "\26\0\1\146\57\0\4\72\12\0\1\72\30\0\1\72"+
    "\17\0\2\147\14\0\1\147\50\0\3\150\13\0\1\150"+
    "\50\0\4\151\5\0\1\151\4\0\7\151\51\0\1\152"+
    "\66\0\1\153\1\154\56\0\4\27\5\0\2\27\3\0"+
    "\20\27\1\155\6\27\22\0\4\27\5\0\2\27\3\0"+
    "\4\27\1\156\22\27\22\0\4\27\5\0\2\27\3\0"+
    "\5\27\1\157\21\27\22\0\4\27\5\0\2\27\3\0"+
    "\21\27\1\160\5\27\22\0\4\27\5\0\2\27\3\0"+
    "\1\27\1\161\25\27\22\0\4\27\5\0\2\27\3\0"+
    "\14\27\1\162\12\27\22\0\4\27\5\0\2\27\3\0"+
    "\20\27\1\163\6\27\22\0\4\27\5\0\2\27\3\0"+
    "\12\27\1\164\14\27\22\0\4\27\5\0\2\27\3\0"+
    "\17\27\1\165\7\27\22\0\4\27\5\0\2\27\3\0"+
    "\15\27\1\166\11\27\22\0\4\27\5\0\2\27\3\0"+
    "\14\27\1\167\12\27\22\0\4\27\5\0\2\27\3\0"+
    "\16\27\1\170\10\27\22\0\4\27\5\0\2\27\3\0"+
    "\13\27\1\171\5\27\1\172\5\27\22\0\4\27\5\0"+
    "\2\27\3\0\21\27\1\173\5\27\22\0\4\27\5\0"+
    "\2\27\3\0\12\27\1\174\14\27\22\0\4\27\5\0"+
    "\2\27\3\0\5\27\1\175\21\27\22\0\4\27\5\0"+
    "\2\27\3\0\10\27\1\176\4\27\1\177\11\27\22\0"+
    "\4\27\5\0\2\27\3\0\2\27\1\200\24\27\22\0"+
    "\4\27\5\0\2\27\3\0\21\27\1\201\5\27\22\0"+
    "\4\27\5\0\2\27\3\0\1\27\1\202\25\27\22\0"+
    "\4\27\5\0\2\27\3\0\16\27\1\203\10\27\22\0"+
    "\4\27\5\0\2\27\3\0\5\27\1\204\2\27\1\205"+
    "\6\27\1\206\7\27\22\0\4\27\5\0\2\27\3\0"+
    "\22\27\1\207\3\27\1\210\22\0\4\27\5\0\2\27"+
    "\3\0\16\27\1\211\10\27\22\0\4\27\5\0\2\27"+
    "\3\0\5\27\1\212\21\27\22\0\4\27\5\0\2\27"+
    "\3\0\17\27\1\213\7\27\22\0\4\27\5\0\2\27"+
    "\3\0\10\27\1\214\16\27\22\0\4\27\5\0\2\27"+
    "\3\0\17\27\1\215\7\27\3\0\11\144\1\216\55\144"+
    "\2\62\1\144\2\62\1\217\3\62\1\145\55\62\26\0"+
    "\1\220\57\0\4\27\5\0\2\27\3\0\21\27\1\221"+
    "\5\27\22\0\4\27\5\0\2\27\3\0\1\27\1\222"+
    "\25\27\22\0\4\27\5\0\2\27\3\0\3\27\1\223"+
    "\23\27\22\0\4\27\5\0\2\27\3\0\20\27\1\224"+
    "\6\27\22\0\4\27\5\0\2\27\3\0\20\27\1\225"+
    "\1\226\5\27\22\0\4\27\5\0\2\27\3\0\5\27"+
    "\1\227\21\27\22\0\4\27\5\0\2\27\3\0\20\27"+
    "\1\230\6\27\22\0\4\27\5\0\2\27\3\0\13\27"+
    "\1\231\13\27\22\0\4\27\5\0\2\27\3\0\3\27"+
    "\1\232\23\27\22\0\4\27\5\0\2\27\3\0\15\27"+
    "\1\233\11\27\22\0\4\27\5\0\2\27\3\0\5\27"+
    "\1\234\21\27\22\0\4\27\5\0\2\27\3\0\10\27"+
    "\1\235\16\27\22\0\4\27\5\0\2\27\3\0\12\27"+
    "\1\236\14\27\22\0\4\27\5\0\2\27\3\0\17\27"+
    "\1\237\7\27\22\0\4\27\5\0\2\27\3\0\23\27"+
    "\1\240\3\27\22\0\4\27\5\0\2\27\3\0\21\27"+
    "\1\241\5\27\22\0\4\27\5\0\2\27\3\0\12\27"+
    "\1\242\14\27\22\0\4\27\5\0\2\27\3\0\22\27"+
    "\1\243\4\27\22\0\4\27\5\0\2\27\3\0\21\27"+
    "\1\244\5\27\22\0\4\27\5\0\2\27\3\0\5\27"+
    "\1\245\21\27\22\0\4\27\5\0\2\27\3\0\14\27"+
    "\1\246\12\27\22\0\4\27\5\0\2\27\3\0\20\27"+
    "\1\247\6\27\22\0\4\27\5\0\2\27\3\0\15\27"+
    "\1\250\11\27\22\0\4\27\5\0\2\27\3\0\5\27"+
    "\1\251\21\27\22\0\4\27\5\0\2\27\3\0\5\27"+
    "\1\252\21\27\22\0\4\27\5\0\2\27\3\0\12\27"+
    "\1\253\14\27\3\0\5\144\1\254\3\144\1\216\55\144"+
    "\17\0\4\27\5\0\2\27\3\0\17\27\1\255\7\27"+
    "\22\0\4\27\5\0\2\27\3\0\11\27\1\256\15\27"+
    "\22\0\4\27\5\0\2\27\3\0\7\27\1\257\17\27"+
    "\22\0\4\27\5\0\2\27\3\0\20\27\1\260\6\27"+
    "\22\0\4\27\5\0\2\27\3\0\21\27\1\261\5\27"+
    "\22\0\4\27\5\0\2\27\3\0\10\27\1\262\16\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\263\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\21\27\1\264\5\27"+
    "\22\0\4\27\5\0\2\27\3\0\17\27\1\265\7\27"+
    "\22\0\4\27\5\0\2\27\3\0\20\27\1\266\6\27"+
    "\22\0\4\27\5\0\2\27\3\0\23\27\1\267\3\27"+
    "\22\0\4\27\5\0\2\27\3\0\17\27\1\270\7\27"+
    "\22\0\4\27\5\0\2\27\3\0\1\27\1\271\25\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\272\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\10\27\1\273\16\27"+
    "\22\0\4\27\5\0\2\27\3\0\17\27\1\274\7\27"+
    "\22\0\4\27\5\0\2\27\3\0\10\27\1\275\16\27"+
    "\22\0\4\27\5\0\2\27\3\0\17\27\1\276\7\27"+
    "\22\0\4\27\5\0\2\27\3\0\24\27\1\277\2\27"+
    "\22\0\4\27\5\0\2\27\3\0\15\27\1\300\11\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\301\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\1\27\1\302\25\27"+
    "\22\0\4\27\5\0\2\27\3\0\17\27\1\303\7\27"+
    "\22\0\4\27\5\0\2\27\3\0\14\27\1\304\12\27"+
    "\22\0\4\27\5\0\2\27\3\0\10\27\1\305\16\27"+
    "\22\0\4\27\5\0\2\27\3\0\21\27\1\306\5\27"+
    "\22\0\4\27\5\0\2\27\3\0\16\27\1\307\10\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\310\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\10\27\1\311\16\27"+
    "\22\0\4\27\5\0\2\27\3\0\21\27\1\312\5\27"+
    "\22\0\4\27\5\0\2\27\3\0\3\27\1\313\23\27"+
    "\22\0\4\27\5\0\2\27\3\0\3\27\1\314\23\27"+
    "\22\0\4\27\5\0\2\27\3\0\14\27\1\315\12\27"+
    "\22\0\4\27\5\0\2\27\3\0\3\27\1\316\23\27"+
    "\22\0\4\27\5\0\2\27\3\0\6\27\1\317\20\27"+
    "\22\0\4\27\5\0\2\27\3\0\3\27\1\320\23\27"+
    "\22\0\4\27\5\0\2\27\3\0\22\27\1\321\4\27"+
    "\22\0\4\27\5\0\2\27\3\0\22\27\1\322\4\27"+
    "\22\0\4\27\5\0\2\27\3\0\15\27\1\323\11\27"+
    "\22\0\4\27\5\0\2\27\3\0\1\27\1\324\25\27"+
    "\22\0\4\27\5\0\2\27\3\0\4\27\1\325\22\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\326\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\21\27\1\327\5\27"+
    "\22\0\4\27\5\0\2\27\3\0\21\27\1\330\5\27"+
    "\22\0\4\27\5\0\2\27\3\0\3\27\1\331\23\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\332\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\14\27\1\333\12\27"+
    "\22\0\4\27\5\0\2\27\3\0\3\27\1\334\23\27"+
    "\22\0\4\27\5\0\2\27\3\0\4\27\1\335\22\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\336\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\21\27\1\337\5\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\340\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\5\27\1\341\21\27"+
    "\22\0\4\27\5\0\2\27\3\0\4\27\1\342\22\27"+
    "\22\0\4\27\5\0\2\27\3\0\15\27\1\343\11\27"+
    "\22\0\4\27\5\0\2\27\3\0\14\27\1\344\12\27"+
    "\22\0\4\27\5\0\2\27\3\0\17\27\1\345\7\27"+
    "\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8800];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\2\1\1\11\5\1\2\11"+
    "\4\1\2\11\22\1\3\11\1\0\1\11\2\1\4\11"+
    "\2\1\1\11\1\1\3\0\1\1\3\11\1\1\1\11"+
    "\40\1\1\0\1\1\1\11\3\1\2\11\42\1\1\0"+
    "\1\1\1\11\125\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TestLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 85: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 86: break;
          case 3:
            { return TestTypes.COMMENT;
            }
          // fall through
          case 87: break;
          case 4:
            { return TestTypes.MOD;
            }
          // fall through
          case 88: break;
          case 5:
            { return TestTypes.PAREN_OPEN;
            }
          // fall through
          case 89: break;
          case 6:
            { return TestTypes.PAREN_CLOSE;
            }
          // fall through
          case 90: break;
          case 7:
            { return TestTypes.MUL;
            }
          // fall through
          case 91: break;
          case 8:
            { return TestTypes.ADD;
            }
          // fall through
          case 92: break;
          case 9:
            { return TestTypes.COMMA;
            }
          // fall through
          case 93: break;
          case 10:
            { return TestTypes.SUB;
            }
          // fall through
          case 94: break;
          case 11:
            { return TestTypes.DOT;
            }
          // fall through
          case 95: break;
          case 12:
            { return TestTypes.DIV;
            }
          // fall through
          case 96: break;
          case 13:
            { return TestTypes.INTEGER;
            }
          // fall through
          case 97: break;
          case 14:
            { return TestTypes.COLON;
            }
          // fall through
          case 98: break;
          case 15:
            { return TestTypes.SEMI;
            }
          // fall through
          case 99: break;
          case 16:
            { return TestTypes.LT;
            }
          // fall through
          case 100: break;
          case 17:
            { return TestTypes.ASSIGN;
            }
          // fall through
          case 101: break;
          case 18:
            { return TestTypes.GT;
            }
          // fall through
          case 102: break;
          case 19:
            { return TestTypes.IDENT;
            }
          // fall through
          case 103: break;
          case 20:
            { return TestTypes.BRACKET_OPEN;
            }
          // fall through
          case 104: break;
          case 21:
            { return TestTypes.BRACKET_CLOSE;
            }
          // fall through
          case 105: break;
          case 22:
            { return TestTypes.POW;
            }
          // fall through
          case 106: break;
          case 23:
            { return TestTypes.CURLY_OPEN;
            }
          // fall through
          case 107: break;
          case 24:
            { return TestTypes.CURLY_CLOSE;
            }
          // fall through
          case 108: break;
          case 25:
            { return TestTypes.NOT_EQUALS;
            }
          // fall through
          case 109: break;
          case 26:
            { return TestTypes.STRING;
            }
          // fall through
          case 110: break;
          case 27:
            { return TestTypes.MOD_ASSIGN;
            }
          // fall through
          case 111: break;
          case 28:
            { return TestTypes.MUL_ASSIGN;
            }
          // fall through
          case 112: break;
          case 29:
            { return TestTypes.ADD_ASSIGN;
            }
          // fall through
          case 113: break;
          case 30:
            { return TestTypes.SUB_ASSIGN;
            }
          // fall through
          case 114: break;
          case 31:
            { return TestTypes.REAL;
            }
          // fall through
          case 115: break;
          case 32:
            { return TestTypes.IDIV;
            }
          // fall through
          case 116: break;
          case 33:
            { return TestTypes.DIV_ASSIGN;
            }
          // fall through
          case 117: break;
          case 34:
            { return TestTypes.SAL;
            }
          // fall through
          case 118: break;
          case 35:
            { return TestTypes.LEQ;
            }
          // fall through
          case 119: break;
          case 36:
            { return TestTypes.EQUALS;
            }
          // fall through
          case 120: break;
          case 37:
            { return TestTypes.GEQ;
            }
          // fall through
          case 121: break;
          case 38:
            { return TestTypes.SAR;
            }
          // fall through
          case 122: break;
          case 39:
            { return TestTypes.POW_ASSIGN;
            }
          // fall through
          case 123: break;
          case 40:
            { return TestTypes.DO;
            }
          // fall through
          case 124: break;
          case 41:
            { return TestTypes.IF;
            }
          // fall through
          case 125: break;
          case 42:
            { return TestTypes.IN;
            }
          // fall through
          case 126: break;
          case 43:
            { return TestTypes.OR;
            }
          // fall through
          case 127: break;
          case 44:
            { return TestTypes.IDIV_ASSIGN;
            }
          // fall through
          case 128: break;
          case 45:
            { return TestTypes.SAL_ASSIGN;
            }
          // fall through
          case 129: break;
          case 46:
            { return TestTypes.SAR_ASSIGN;
            }
          // fall through
          case 130: break;
          case 47:
            { return TestTypes.SLR;
            }
          // fall through
          case 131: break;
          case 48:
            { return TestTypes.AND;
            }
          // fall through
          case 132: break;
          case 49:
            { return TestTypes.FOR;
            }
          // fall through
          case 133: break;
          case 50:
            { return TestTypes.NOT;
            }
          // fall through
          case 134: break;
          case 51:
            { return TestTypes.TRY;
            }
          // fall through
          case 135: break;
          case 52:
            { return TestTypes.USE;
            }
          // fall through
          case 136: break;
          case 53:
            { return TestTypes.VAR;
            }
          // fall through
          case 137: break;
          case 54:
            { return TestTypes.XOR;
            }
          // fall through
          case 138: break;
          case 55:
            { return TestTypes.BLOCK_COMMENT;
            }
          // fall through
          case 139: break;
          case 56:
            { return TestTypes.SLR_ASSIGN;
            }
          // fall through
          case 140: break;
          case 57:
            { return TestTypes.ELSE;
            }
          // fall through
          case 141: break;
          case 58:
            { return TestTypes.FROM;
            }
          // fall through
          case 142: break;
          case 59:
            { return TestTypes.NULL;
            }
          // fall through
          case 143: break;
          case 60:
            { return TestTypes.THEN;
            }
          // fall through
          case 144: break;
          case 61:
            { return TestTypes.THIS;
            }
          // fall through
          case 145: break;
          case 62:
            { return TestTypes.TRUE;
            }
          // fall through
          case 146: break;
          case 63:
            { return TestTypes.BREAK;
            }
          // fall through
          case 147: break;
          case 64:
            { return TestTypes.CATCH;
            }
          // fall through
          case 148: break;
          case 65:
            { return TestTypes.CLASS;
            }
          // fall through
          case 149: break;
          case 66:
            { return TestTypes.CONST;
            }
          // fall through
          case 150: break;
          case 67:
            { return TestTypes.FALSE;
            }
          // fall through
          case 151: break;
          case 68:
            { return TestTypes.SUPER;
            }
          // fall through
          case 152: break;
          case 69:
            { return TestTypes.THROW;
            }
          // fall through
          case 153: break;
          case 70:
            { return TestTypes.WHILE;
            }
          // fall through
          case 154: break;
          case 71:
            { return TestTypes.IMPORT;
            }
          // fall through
          case 155: break;
          case 72:
            { return TestTypes.NATIVE;
            }
          // fall through
          case 156: break;
          case 73:
            { return TestTypes.PUBLIC;
            }
          // fall through
          case 157: break;
          case 74:
            { return TestTypes.RETURN;
            }
          // fall through
          case 158: break;
          case 75:
            { return TestTypes.STATIC;
            }
          // fall through
          case 159: break;
          case 76:
            { return TestTypes.TYPEOF;
            }
          // fall through
          case 160: break;
          case 77:
            { return TestTypes.PRIVATE;
            }
          // fall through
          case 161: break;
          case 78:
            { return TestTypes.ABSTRACT;
            }
          // fall through
          case 162: break;
          case 79:
            { return TestTypes.CONTINUE;
            }
          // fall through
          case 163: break;
          case 80:
            { return TestTypes.FUNCTION;
            }
          // fall through
          case 164: break;
          case 81:
            { return TestTypes.NAMESPACE;
            }
          // fall through
          case 165: break;
          case 82:
            { return TestTypes.PROTECTED;
            }
          // fall through
          case 166: break;
          case 83:
            { return TestTypes.OVERRIDDEN;
            }
          // fall through
          case 167: break;
          case 84:
            { return TestTypes.CONSTRUCTOR;
            }
          // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
