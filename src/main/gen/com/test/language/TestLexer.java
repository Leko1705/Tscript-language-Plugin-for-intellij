// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Test.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.test.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.test.language.psi.TestTypes;
import com.intellij.psi.TokenType;


class TestLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\123\u0100\1\u0a00\4\u0100\1\u1500"+
    "\10\u0100\1\u1600\2\u0100\1\u1700\1\u1800\1\u1400\1\u0100\1\u0500"+
    "\1\u0100\1\u1900\1\u1600\1\u0900\3\u0100\1\u1300\1\u1a00\114\u0100"+
    "\1\u1b00\1\u1300\153\u0100\1\u1c00\11\u0100\1\u1d00\1\u1400\6\u0100"+
    "\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\0"+
    "\1\3\1\4\4\0\1\5\1\6\2\0\1\7\1\0"+
    "\1\10\1\0\12\11\1\12\1\13\1\0\1\14\3\0"+
    "\32\15\1\16\1\0\1\17\3\0\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\15\1\26\1\27\1\15\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\15\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\15\1\44\1\15\1\45"+
    "\1\0\1\46\7\0\1\1\32\0\1\1\u01bf\0\12\47"+
    "\206\0\12\47\306\0\12\47\234\0\12\47\166\0\12\47"+
    "\140\0\12\47\166\0\12\47\106\0\12\47\u0116\0\12\47"+
    "\106\0\12\47\346\0\1\1\u015f\0\12\47\46\0\12\47"+
    "\u012c\0\12\47\200\0\12\47\246\0\12\47\6\0\12\47"+
    "\266\0\12\47\126\0\12\47\206\0\12\47\6\0\12\47"+
    "\246\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\u01cf\0\12\47\46\0\12\47\306\0\12\47"+
    "\26\0\12\47\126\0\12\47\u0196\0\12\47\246\0\12\47"+
    "\206\0\12\47\u012c\0\12\47\200\0\12\47\74\0\12\47"+
    "\220\0\12\47\166\0\12\47\146\0\12\47\206\0\12\47"+
    "\106\0\12\47\266\0\12\47\u0164\0\62\47\100\0\12\47"+
    "\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7680];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\2\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\16\13\1\16\1\17\1\0\1\20\5\13\1\21\4\13"+
    "\1\22\1\23\23\13\1\24\16\13\1\25\1\13\1\26"+
    "\7\13\1\27\4\13\1\30\6\13\1\31\1\32\1\13"+
    "\1\33\3\13\1\34\1\35\1\36\1\37\1\13\1\40"+
    "\10\13\1\41\1\42\1\13\1\43\5\13\1\44\3\13"+
    "\1\45\1\46\1\47\6\13\1\50\1\13\1\51\1\13"+
    "\1\52\1\53\4\13\1\54\1\13\1\55\1\13\1\56"+
    "\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\50\0\50\0\50"+
    "\0\310\0\360\0\50\0\50\0\50\0\u0118\0\50\0\50"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\50\0\50"+
    "\0\170\0\50\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0118"+
    "\0\u0438\0\u0460\0\u0488\0\u04b0\0\u0118\0\u0118\0\u04d8\0\u0500"+
    "\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640"+
    "\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780"+
    "\0\u07a8\0\u0118\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8"+
    "\0\u0118\0\u0a00\0\u0118\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8"+
    "\0\u0af0\0\u0b18\0\u0118\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0118"+
    "\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0118\0\u0118"+
    "\0\u0cd0\0\u0118\0\u0cf8\0\u0d20\0\u0d48\0\u0118\0\u0118\0\u0118"+
    "\0\u0d70\0\u0d98\0\u0118\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60"+
    "\0\u0e88\0\u0eb0\0\u0ed8\0\u0118\0\u0118\0\u0f00\0\u0118\0\u0f28"+
    "\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0118\0\u0ff0\0\u1018\0\u1040"+
    "\0\u0118\0\u0118\0\u0118\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108"+
    "\0\u1130\0\u0118\0\u1158\0\u0118\0\u1180\0\u0118\0\u0118\0\u11a8"+
    "\0\u11d0\0\u11f8\0\u1220\0\u0118\0\u1248\0\u0118\0\u1270\0\u0118"+
    "\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\16\1\27\3\16"+
    "\1\30\1\31\1\32\1\16\1\33\1\34\1\16\1\35"+
    "\1\36\1\16\1\37\1\40\1\12\51\0\2\3\45\0"+
    "\3\41\1\42\44\41\2\5\1\0\45\5\11\0\1\11"+
    "\35\0\1\11\10\0\1\11\1\12\35\0\1\12\11\0"+
    "\1\16\3\0\1\16\2\0\25\16\14\0\1\16\3\0"+
    "\1\16\2\0\1\16\1\43\23\16\14\0\1\16\3\0"+
    "\1\16\2\0\16\16\1\44\6\16\14\0\1\16\3\0"+
    "\1\16\2\0\1\45\10\16\1\46\2\16\1\47\10\16"+
    "\14\0\1\16\3\0\1\16\2\0\14\16\1\50\10\16"+
    "\14\0\1\16\3\0\1\16\2\0\11\16\1\51\13\16"+
    "\14\0\1\16\3\0\1\16\2\0\1\52\13\16\1\53"+
    "\4\16\1\54\3\16\14\0\1\16\3\0\1\16\2\0"+
    "\5\16\1\55\5\16\1\56\11\16\14\0\1\16\3\0"+
    "\1\16\2\0\1\57\20\16\1\60\3\16\14\0\1\16"+
    "\3\0\1\16\2\0\22\16\1\61\2\16\14\0\1\16"+
    "\3\0\1\16\2\0\16\16\1\62\2\16\1\63\3\16"+
    "\14\0\1\16\3\0\1\16\2\0\20\16\1\64\1\65"+
    "\3\16\14\0\1\16\3\0\1\16\2\0\6\16\1\66"+
    "\7\16\1\67\5\16\1\70\14\0\1\16\3\0\1\16"+
    "\2\0\1\71\24\16\14\0\1\16\3\0\1\16\2\0"+
    "\6\16\1\72\16\16\14\0\1\16\3\0\1\16\2\0"+
    "\17\16\1\73\5\16\14\0\1\16\3\0\1\16\2\0"+
    "\4\16\1\74\20\16\14\0\1\16\3\0\1\16\2\0"+
    "\20\16\1\75\4\16\14\0\1\16\3\0\1\16\2\0"+
    "\1\76\24\16\14\0\1\16\3\0\1\16\2\0\13\16"+
    "\1\77\11\16\14\0\1\16\3\0\1\16\2\0\17\16"+
    "\1\100\5\16\14\0\1\16\3\0\1\16\2\0\11\16"+
    "\1\101\13\16\14\0\1\16\3\0\1\16\2\0\16\16"+
    "\1\102\6\16\14\0\1\16\3\0\1\16\2\0\13\16"+
    "\1\103\11\16\14\0\1\16\3\0\1\16\2\0\12\16"+
    "\1\104\5\16\1\105\4\16\14\0\1\16\3\0\1\16"+
    "\2\0\11\16\1\106\13\16\14\0\1\16\3\0\1\16"+
    "\2\0\4\16\1\107\20\16\14\0\1\16\3\0\1\16"+
    "\2\0\7\16\1\110\4\16\1\111\10\16\14\0\1\16"+
    "\3\0\1\16\2\0\1\16\1\112\23\16\14\0\1\16"+
    "\3\0\1\16\2\0\1\113\24\16\14\0\1\16\3\0"+
    "\1\16\2\0\15\16\1\114\7\16\14\0\1\16\3\0"+
    "\1\16\2\0\4\16\1\115\2\16\1\116\6\16\1\117"+
    "\6\16\14\0\1\16\3\0\1\16\2\0\21\16\1\120"+
    "\2\16\1\121\14\0\1\16\3\0\1\16\2\0\15\16"+
    "\1\122\7\16\14\0\1\16\3\0\1\16\2\0\16\16"+
    "\1\123\6\16\14\0\1\16\3\0\1\16\2\0\7\16"+
    "\1\124\15\16\14\0\1\16\3\0\1\16\2\0\20\16"+
    "\1\125\4\16\14\0\1\16\3\0\1\16\2\0\1\126"+
    "\24\16\14\0\1\16\3\0\1\16\2\0\2\16\1\127"+
    "\22\16\14\0\1\16\3\0\1\16\2\0\17\16\1\130"+
    "\5\16\14\0\1\16\3\0\1\16\2\0\17\16\1\131"+
    "\1\132\4\16\14\0\1\16\3\0\1\16\2\0\4\16"+
    "\1\133\20\16\14\0\1\16\3\0\1\16\2\0\17\16"+
    "\1\134\5\16\14\0\1\16\3\0\1\16\2\0\2\16"+
    "\1\135\22\16\14\0\1\16\3\0\1\16\2\0\4\16"+
    "\1\136\20\16\14\0\1\16\3\0\1\16\2\0\7\16"+
    "\1\137\15\16\14\0\1\16\3\0\1\16\2\0\11\16"+
    "\1\140\13\16\14\0\1\16\3\0\1\16\2\0\16\16"+
    "\1\141\6\16\14\0\1\16\3\0\1\16\2\0\22\16"+
    "\1\142\2\16\14\0\1\16\3\0\1\16\2\0\20\16"+
    "\1\143\4\16\14\0\1\16\3\0\1\16\2\0\11\16"+
    "\1\144\13\16\14\0\1\16\3\0\1\16\2\0\20\16"+
    "\1\145\4\16\14\0\1\16\3\0\1\16\2\0\4\16"+
    "\1\146\20\16\14\0\1\16\3\0\1\16\2\0\13\16"+
    "\1\147\11\16\14\0\1\16\3\0\1\16\2\0\17\16"+
    "\1\150\5\16\14\0\1\16\3\0\1\16\2\0\14\16"+
    "\1\151\10\16\14\0\1\16\3\0\1\16\2\0\4\16"+
    "\1\152\20\16\14\0\1\16\3\0\1\16\2\0\4\16"+
    "\1\153\20\16\14\0\1\16\3\0\1\16\2\0\11\16"+
    "\1\154\13\16\14\0\1\16\3\0\1\16\2\0\16\16"+
    "\1\155\6\16\14\0\1\16\3\0\1\16\2\0\10\16"+
    "\1\156\14\16\14\0\1\16\3\0\1\16\2\0\6\16"+
    "\1\157\16\16\14\0\1\16\3\0\1\16\2\0\17\16"+
    "\1\160\5\16\14\0\1\16\3\0\1\16\2\0\20\16"+
    "\1\161\4\16\14\0\1\16\3\0\1\16\2\0\7\16"+
    "\1\162\15\16\14\0\1\16\3\0\1\16\2\0\4\16"+
    "\1\163\20\16\14\0\1\16\3\0\1\16\2\0\20\16"+
    "\1\164\4\16\14\0\1\16\3\0\1\16\2\0\17\16"+
    "\1\165\5\16\14\0\1\16\3\0\1\16\2\0\22\16"+
    "\1\166\2\16\14\0\1\16\3\0\1\16\2\0\16\16"+
    "\1\167\6\16\14\0\1\16\3\0\1\16\2\0\1\170"+
    "\24\16\14\0\1\16\3\0\1\16\2\0\4\16\1\171"+
    "\20\16\14\0\1\16\3\0\1\16\2\0\7\16\1\172"+
    "\15\16\14\0\1\16\3\0\1\16\2\0\7\16\1\173"+
    "\15\16\14\0\1\16\3\0\1\16\2\0\16\16\1\174"+
    "\6\16\14\0\1\16\3\0\1\16\2\0\23\16\1\175"+
    "\1\16\14\0\1\16\3\0\1\16\2\0\14\16\1\176"+
    "\10\16\14\0\1\16\3\0\1\16\2\0\4\16\1\177"+
    "\20\16\14\0\1\16\3\0\1\16\2\0\1\200\24\16"+
    "\14\0\1\16\3\0\1\16\2\0\16\16\1\201\6\16"+
    "\14\0\1\16\3\0\1\16\2\0\13\16\1\202\11\16"+
    "\14\0\1\16\3\0\1\16\2\0\7\16\1\203\15\16"+
    "\14\0\1\16\3\0\1\16\2\0\15\16\1\204\7\16"+
    "\14\0\1\16\3\0\1\16\2\0\4\16\1\205\20\16"+
    "\14\0\1\16\3\0\1\16\2\0\7\16\1\206\15\16"+
    "\14\0\1\16\3\0\1\16\2\0\20\16\1\207\4\16"+
    "\14\0\1\16\3\0\1\16\2\0\2\16\1\210\22\16"+
    "\14\0\1\16\3\0\1\16\2\0\2\16\1\211\22\16"+
    "\14\0\1\16\3\0\1\16\2\0\2\16\1\212\22\16"+
    "\14\0\1\16\3\0\1\16\2\0\5\16\1\213\17\16"+
    "\14\0\1\16\3\0\1\16\2\0\2\16\1\214\22\16"+
    "\14\0\1\16\3\0\1\16\2\0\21\16\1\215\3\16"+
    "\14\0\1\16\3\0\1\16\2\0\21\16\1\216\3\16"+
    "\14\0\1\16\3\0\1\16\2\0\14\16\1\217\10\16"+
    "\14\0\1\16\3\0\1\16\2\0\1\220\24\16\14\0"+
    "\1\16\3\0\1\16\2\0\3\16\1\221\21\16\14\0"+
    "\1\16\3\0\1\16\2\0\4\16\1\222\20\16\14\0"+
    "\1\16\3\0\1\16\2\0\20\16\1\223\4\16\14\0"+
    "\1\16\3\0\1\16\2\0\20\16\1\224\4\16\14\0"+
    "\1\16\3\0\1\16\2\0\2\16\1\225\22\16\14\0"+
    "\1\16\3\0\1\16\2\0\4\16\1\226\20\16\14\0"+
    "\1\16\3\0\1\16\2\0\13\16\1\227\11\16\14\0"+
    "\1\16\3\0\1\16\2\0\2\16\1\230\22\16\14\0"+
    "\1\16\3\0\1\16\2\0\3\16\1\231\21\16\14\0"+
    "\1\16\3\0\1\16\2\0\4\16\1\232\20\16\14\0"+
    "\1\16\3\0\1\16\2\0\20\16\1\233\4\16\14\0"+
    "\1\16\3\0\1\16\2\0\4\16\1\234\20\16\14\0"+
    "\1\16\3\0\1\16\2\0\4\16\1\235\20\16\14\0"+
    "\1\16\3\0\1\16\2\0\3\16\1\236\21\16\14\0"+
    "\1\16\3\0\1\16\2\0\14\16\1\237\10\16\14\0"+
    "\1\16\3\0\1\16\2\0\13\16\1\240\11\16\14\0"+
    "\1\16\3\0\1\16\2\0\16\16\1\241\6\16\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4760];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\3\11\2\1\3\11\1\1\2\11"+
    "\16\1\2\11\1\0\1\11\177\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TestLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 48: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 49: break;
          case 3:
            { return TestTypes.PAREN_OPEN;
            }
          // fall through
          case 50: break;
          case 4:
            { return TestTypes.PAREN_CLOSE;
            }
          // fall through
          case 51: break;
          case 5:
            { return TestTypes.COMMA;
            }
          // fall through
          case 52: break;
          case 6:
            { return TestTypes.REAL;
            }
          // fall through
          case 53: break;
          case 7:
            { return TestTypes.INTEGER;
            }
          // fall through
          case 54: break;
          case 8:
            { return TestTypes.COLON;
            }
          // fall through
          case 55: break;
          case 9:
            { return TestTypes.SEMI;
            }
          // fall through
          case 56: break;
          case 10:
            { return TestTypes.ASSIGN;
            }
          // fall through
          case 57: break;
          case 11:
            { return TestTypes.IDENT;
            }
          // fall through
          case 58: break;
          case 12:
            { return TestTypes.BRACKET_OPEN;
            }
          // fall through
          case 59: break;
          case 13:
            { return TestTypes.BRACKET_CLOSE;
            }
          // fall through
          case 60: break;
          case 14:
            { return TestTypes.CURLY_OPEN;
            }
          // fall through
          case 61: break;
          case 15:
            { return TestTypes.CURLY_CLOSE;
            }
          // fall through
          case 62: break;
          case 16:
            { return TestTypes.STRING;
            }
          // fall through
          case 63: break;
          case 17:
            { return TestTypes.DO;
            }
          // fall through
          case 64: break;
          case 18:
            { return TestTypes.IF;
            }
          // fall through
          case 65: break;
          case 19:
            { return TestTypes.IN;
            }
          // fall through
          case 66: break;
          case 20:
            { return TestTypes.FOR;
            }
          // fall through
          case 67: break;
          case 21:
            { return TestTypes.TRY;
            }
          // fall through
          case 68: break;
          case 22:
            { return TestTypes.VAR;
            }
          // fall through
          case 69: break;
          case 23:
            { return TestTypes.ELSE;
            }
          // fall through
          case 70: break;
          case 24:
            { return TestTypes.NULL;
            }
          // fall through
          case 71: break;
          case 25:
            { return TestTypes.THEN;
            }
          // fall through
          case 72: break;
          case 26:
            { return TestTypes.THIS;
            }
          // fall through
          case 73: break;
          case 27:
            { return TestTypes.TRUE;
            }
          // fall through
          case 74: break;
          case 28:
            { return TestTypes.BREAK;
            }
          // fall through
          case 75: break;
          case 29:
            { return TestTypes.CATCH;
            }
          // fall through
          case 76: break;
          case 30:
            { return TestTypes.CLASS;
            }
          // fall through
          case 77: break;
          case 31:
            { return TestTypes.CONST;
            }
          // fall through
          case 78: break;
          case 32:
            { return TestTypes.FALSE;
            }
          // fall through
          case 79: break;
          case 33:
            { return TestTypes.SUPER;
            }
          // fall through
          case 80: break;
          case 34:
            { return TestTypes.THROW;
            }
          // fall through
          case 81: break;
          case 35:
            { return TestTypes.WHILE;
            }
          // fall through
          case 82: break;
          case 36:
            { return TestTypes.NATIVE;
            }
          // fall through
          case 83: break;
          case 37:
            { return TestTypes.PUBLIC;
            }
          // fall through
          case 84: break;
          case 38:
            { return TestTypes.STATIC;
            }
          // fall through
          case 85: break;
          case 39:
            { return TestTypes.TYPEOF;
            }
          // fall through
          case 86: break;
          case 40:
            { return TestTypes.PRIVATE;
            }
          // fall through
          case 87: break;
          case 41:
            { return TestTypes.ABSTRACT;
            }
          // fall through
          case 88: break;
          case 42:
            { return TestTypes.CONTINUE;
            }
          // fall through
          case 89: break;
          case 43:
            { return TestTypes.FUNCTION;
            }
          // fall through
          case 90: break;
          case 44:
            { return TestTypes.NAMESPACE;
            }
          // fall through
          case 91: break;
          case 45:
            { return TestTypes.PROTECTED;
            }
          // fall through
          case 92: break;
          case 46:
            { return TestTypes.OVERRIDDEN;
            }
          // fall through
          case 93: break;
          case 47:
            { return TestTypes.CONSTRUCTOR;
            }
          // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
