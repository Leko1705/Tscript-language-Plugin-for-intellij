// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Test.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.test.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.test.language.psi.TestTypes;
import com.intellij.psi.TokenType;


class TestLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\2\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\32\26\1\27\1\0\1\30"+
    "\1\31\1\26\1\0\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\26\1\40\1\41\1\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\26\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\26\1\60\1\0\1\61"+
    "\7\0\1\3\32\0\1\1\u01bf\0\12\62\206\0\12\62"+
    "\306\0\12\62\234\0\12\62\166\0\12\62\140\0\12\62"+
    "\166\0\12\62\106\0\12\62\u0116\0\12\62\106\0\12\62"+
    "\346\0\1\1\u015f\0\12\62\46\0\12\62\u012c\0\12\62"+
    "\200\0\12\62\246\0\12\62\6\0\12\62\266\0\12\62"+
    "\126\0\12\62\206\0\12\62\6\0\12\62\246\0\13\1"+
    "\35\0\2\3\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\u01cf\0\12\62\46\0\12\62\306\0\12\62\26\0\12\62"+
    "\126\0\12\62\u0196\0\12\62\6\0\u0100\63\240\0\12\62"+
    "\206\0\12\62\u012c\0\12\62\200\0\12\62\74\0\12\62"+
    "\220\0\12\62\166\0\12\62\146\0\12\62\206\0\12\62"+
    "\106\0\12\62\266\0\12\62\u0164\0\62\62\100\0\12\62"+
    "\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\20\23\1\27\1\30\1\31\1\0\1\32\2\3\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\6\23\1\50\4\23\1\51"+
    "\1\52\3\23\1\53\14\23\1\3\1\54\1\55\1\56"+
    "\1\57\1\23\1\60\6\23\1\61\3\23\1\62\14\23"+
    "\1\63\1\23\1\64\1\23\1\65\1\66\1\67\6\23"+
    "\1\70\4\23\1\71\7\23\1\72\1\73\1\23\1\74"+
    "\3\23\1\75\1\76\1\77\1\100\1\23\1\101\11\23"+
    "\1\102\1\103\1\23\1\104\5\23\1\105\3\23\1\106"+
    "\1\107\1\110\1\111\6\23\1\112\1\23\1\113\1\23"+
    "\1\114\1\115\4\23\1\116\1\23\1\117\1\23\1\120"+
    "\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\64"+
    "\0\64\0\u016c\0\u01a0\0\64\0\u01d4\0\u0208\0\u023c\0\u0270"+
    "\0\64\0\64\0\u02a4\0\u02d8\0\u030c\0\u0340\0\64\0\64"+
    "\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0"+
    "\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\64\0\64\0\64\0\320\0\64\0\u06e8\0\u071c"+
    "\0\64\0\64\0\64\0\64\0\u0208\0\u0750\0\64\0\u0784"+
    "\0\64\0\64\0\64\0\u07b8\0\64\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0340\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u0340\0\u0340\0\u09f4\0\u0a28\0\u0a5c\0\u0340\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\64\0\64\0\64\0\u0d34\0\u0d68"+
    "\0\u0340\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0340"+
    "\0\u0ed4\0\u0f08\0\u0f3c\0\u0340\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u0340\0\u11e0\0\u0340\0\u1214\0\u0340\0\u071c\0\64\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u0340\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u0340\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u0340\0\u0340\0\u15bc\0\u0340\0\u15f0\0\u1624"+
    "\0\u1658\0\u0340\0\u0340\0\u0340\0\u168c\0\u16c0\0\u0340\0\u16f4"+
    "\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894"+
    "\0\u0340\0\u0340\0\u18c8\0\u0340\0\u18fc\0\u1930\0\u1964\0\u1998"+
    "\0\u19cc\0\u0340\0\u1a00\0\u1a34\0\u1a68\0\u0340\0\u0340\0\u0340"+
    "\0\u0340\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u0340"+
    "\0\u1bd4\0\u0340\0\u1c08\0\u0340\0\u0340\0\u1c3c\0\u1c70\0\u1ca4"+
    "\0\u1cd8\0\u0340\0\u1d0c\0\u0340\0\u1d40\0\u0340\0\u0340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\26\1\40"+
    "\3\26\1\41\1\42\1\43\1\44\1\45\1\46\1\26"+
    "\1\47\1\50\1\51\1\26\1\52\1\53\1\20\1\2"+
    "\65\0\3\3\104\0\1\54\37\0\5\55\1\56\56\55"+
    "\2\57\1\0\7\57\1\60\51\57\24\0\1\61\63\0"+
    "\1\62\63\0\1\63\63\0\1\64\57\0\1\65\41\0"+
    "\1\65\20\0\1\66\4\0\1\67\55\0\1\65\1\0"+
    "\1\20\41\0\1\20\24\0\1\70\1\71\63\0\1\72"+
    "\63\0\1\73\1\74\56\0\1\26\5\0\1\26\3\0"+
    "\26\26\30\0\1\75\57\0\1\26\5\0\1\26\3\0"+
    "\1\26\1\76\11\26\1\77\12\26\24\0\1\26\5\0"+
    "\1\26\3\0\16\26\1\100\7\26\24\0\1\26\5\0"+
    "\1\26\3\0\1\101\10\26\1\102\2\26\1\103\11\26"+
    "\24\0\1\26\5\0\1\26\3\0\14\26\1\104\11\26"+
    "\24\0\1\26\5\0\1\26\3\0\11\26\1\105\14\26"+
    "\24\0\1\26\5\0\1\26\3\0\1\106\13\26\1\107"+
    "\4\26\1\110\4\26\24\0\1\26\5\0\1\26\3\0"+
    "\5\26\1\111\5\26\1\112\12\26\24\0\1\26\5\0"+
    "\1\26\3\0\1\113\13\26\1\114\4\26\1\115\4\26"+
    "\24\0\1\26\5\0\1\26\3\0\16\26\1\116\3\26"+
    "\1\117\3\26\24\0\1\26\5\0\1\26\3\0\16\26"+
    "\1\120\2\26\1\121\4\26\24\0\1\26\5\0\1\26"+
    "\3\0\4\26\1\122\21\26\24\0\1\26\5\0\1\26"+
    "\3\0\20\26\1\123\1\124\4\26\24\0\1\26\5\0"+
    "\1\26\3\0\6\26\1\125\7\26\1\126\6\26\1\127"+
    "\24\0\1\26\5\0\1\26\3\0\1\130\25\26\24\0"+
    "\1\26\5\0\1\26\3\0\6\26\1\131\17\26\24\0"+
    "\1\26\5\0\1\26\3\0\14\26\1\132\11\26\4\0"+
    "\2\57\1\0\61\57\2\60\1\0\1\57\6\60\1\133"+
    "\50\60\1\57\24\0\1\134\63\0\1\135\63\0\1\136"+
    "\1\137\56\0\1\26\5\0\1\26\3\0\17\26\1\140"+
    "\6\26\24\0\1\26\5\0\1\26\3\0\3\26\1\141"+
    "\22\26\24\0\1\26\5\0\1\26\3\0\4\26\1\142"+
    "\21\26\24\0\1\26\5\0\1\26\3\0\20\26\1\143"+
    "\5\26\24\0\1\26\5\0\1\26\3\0\1\144\25\26"+
    "\24\0\1\26\5\0\1\26\3\0\13\26\1\145\12\26"+
    "\24\0\1\26\5\0\1\26\3\0\17\26\1\146\6\26"+
    "\24\0\1\26\5\0\1\26\3\0\11\26\1\147\14\26"+
    "\24\0\1\26\5\0\1\26\3\0\16\26\1\150\7\26"+
    "\24\0\1\26\5\0\1\26\3\0\13\26\1\151\12\26"+
    "\24\0\1\26\5\0\1\26\3\0\12\26\1\152\5\26"+
    "\1\153\5\26\24\0\1\26\5\0\1\26\3\0\20\26"+
    "\1\154\5\26\24\0\1\26\5\0\1\26\3\0\11\26"+
    "\1\155\14\26\24\0\1\26\5\0\1\26\3\0\4\26"+
    "\1\156\21\26\24\0\1\26\5\0\1\26\3\0\7\26"+
    "\1\157\4\26\1\160\11\26\24\0\1\26\5\0\1\26"+
    "\3\0\1\26\1\161\24\26\24\0\1\26\5\0\1\26"+
    "\3\0\20\26\1\162\5\26\24\0\1\26\5\0\1\26"+
    "\3\0\1\163\25\26\24\0\1\26\5\0\1\26\3\0"+
    "\15\26\1\164\10\26\24\0\1\26\5\0\1\26\3\0"+
    "\4\26\1\165\2\26\1\166\6\26\1\167\7\26\24\0"+
    "\1\26\5\0\1\26\3\0\21\26\1\170\3\26\1\171"+
    "\24\0\1\26\5\0\1\26\3\0\15\26\1\172\10\26"+
    "\24\0\1\26\5\0\1\26\3\0\16\26\1\173\7\26"+
    "\24\0\1\26\5\0\1\26\3\0\7\26\1\174\16\26"+
    "\24\0\1\26\5\0\1\26\3\0\16\26\1\175\7\26"+
    "\4\0\2\60\1\0\1\57\2\60\1\176\3\60\1\133"+
    "\50\60\1\57\24\0\1\177\57\0\1\26\5\0\1\26"+
    "\3\0\20\26\1\200\5\26\24\0\1\26\5\0\1\26"+
    "\3\0\1\201\25\26\24\0\1\26\5\0\1\26\3\0"+
    "\2\26\1\202\23\26\24\0\1\26\5\0\1\26\3\0"+
    "\17\26\1\203\6\26\24\0\1\26\5\0\1\26\3\0"+
    "\17\26\1\204\1\205\5\26\24\0\1\26\5\0\1\26"+
    "\3\0\4\26\1\206\21\26\24\0\1\26\5\0\1\26"+
    "\3\0\17\26\1\207\6\26\24\0\1\26\5\0\1\26"+
    "\3\0\2\26\1\210\23\26\24\0\1\26\5\0\1\26"+
    "\3\0\4\26\1\211\21\26\24\0\1\26\5\0\1\26"+
    "\3\0\7\26\1\212\16\26\24\0\1\26\5\0\1\26"+
    "\3\0\11\26\1\213\14\26\24\0\1\26\5\0\1\26"+
    "\3\0\16\26\1\214\7\26\24\0\1\26\5\0\1\26"+
    "\3\0\22\26\1\215\3\26\24\0\1\26\5\0\1\26"+
    "\3\0\20\26\1\216\5\26\24\0\1\26\5\0\1\26"+
    "\3\0\11\26\1\217\14\26\24\0\1\26\5\0\1\26"+
    "\3\0\21\26\1\220\4\26\24\0\1\26\5\0\1\26"+
    "\3\0\20\26\1\221\5\26\24\0\1\26\5\0\1\26"+
    "\3\0\4\26\1\222\21\26\24\0\1\26\5\0\1\26"+
    "\3\0\13\26\1\223\12\26\24\0\1\26\5\0\1\26"+
    "\3\0\17\26\1\224\6\26\24\0\1\26\5\0\1\26"+
    "\3\0\14\26\1\225\11\26\24\0\1\26\5\0\1\26"+
    "\3\0\4\26\1\226\21\26\24\0\1\26\5\0\1\26"+
    "\3\0\4\26\1\227\21\26\24\0\1\26\5\0\1\26"+
    "\3\0\11\26\1\230\14\26\24\0\1\26\5\0\1\26"+
    "\3\0\16\26\1\231\7\26\24\0\1\26\5\0\1\26"+
    "\3\0\10\26\1\232\15\26\24\0\1\26\5\0\1\26"+
    "\3\0\6\26\1\233\17\26\24\0\1\26\5\0\1\26"+
    "\3\0\17\26\1\234\6\26\24\0\1\26\5\0\1\26"+
    "\3\0\20\26\1\235\5\26\24\0\1\26\5\0\1\26"+
    "\3\0\7\26\1\236\16\26\24\0\1\26\5\0\1\26"+
    "\3\0\4\26\1\237\21\26\24\0\1\26\5\0\1\26"+
    "\3\0\20\26\1\240\5\26\24\0\1\26\5\0\1\26"+
    "\3\0\17\26\1\241\6\26\24\0\1\26\5\0\1\26"+
    "\3\0\22\26\1\242\3\26\24\0\1\26\5\0\1\26"+
    "\3\0\16\26\1\243\7\26\24\0\1\26\5\0\1\26"+
    "\3\0\1\244\25\26\24\0\1\26\5\0\1\26\3\0"+
    "\4\26\1\245\21\26\24\0\1\26\5\0\1\26\3\0"+
    "\7\26\1\246\16\26\24\0\1\26\5\0\1\26\3\0"+
    "\16\26\1\247\7\26\24\0\1\26\5\0\1\26\3\0"+
    "\7\26\1\250\16\26\24\0\1\26\5\0\1\26\3\0"+
    "\16\26\1\251\7\26\24\0\1\26\5\0\1\26\3\0"+
    "\23\26\1\252\2\26\24\0\1\26\5\0\1\26\3\0"+
    "\14\26\1\253\11\26\24\0\1\26\5\0\1\26\3\0"+
    "\4\26\1\254\21\26\24\0\1\26\5\0\1\26\3\0"+
    "\1\255\25\26\24\0\1\26\5\0\1\26\3\0\16\26"+
    "\1\256\7\26\24\0\1\26\5\0\1\26\3\0\13\26"+
    "\1\257\12\26\24\0\1\26\5\0\1\26\3\0\7\26"+
    "\1\260\16\26\24\0\1\26\5\0\1\26\3\0\15\26"+
    "\1\261\10\26\24\0\1\26\5\0\1\26\3\0\4\26"+
    "\1\262\21\26\24\0\1\26\5\0\1\26\3\0\7\26"+
    "\1\263\16\26\24\0\1\26\5\0\1\26\3\0\20\26"+
    "\1\264\5\26\24\0\1\26\5\0\1\26\3\0\2\26"+
    "\1\265\23\26\24\0\1\26\5\0\1\26\3\0\2\26"+
    "\1\266\23\26\24\0\1\26\5\0\1\26\3\0\13\26"+
    "\1\267\12\26\24\0\1\26\5\0\1\26\3\0\2\26"+
    "\1\270\23\26\24\0\1\26\5\0\1\26\3\0\5\26"+
    "\1\271\20\26\24\0\1\26\5\0\1\26\3\0\2\26"+
    "\1\272\23\26\24\0\1\26\5\0\1\26\3\0\21\26"+
    "\1\273\4\26\24\0\1\26\5\0\1\26\3\0\21\26"+
    "\1\274\4\26\24\0\1\26\5\0\1\26\3\0\14\26"+
    "\1\275\11\26\24\0\1\26\5\0\1\26\3\0\1\276"+
    "\25\26\24\0\1\26\5\0\1\26\3\0\3\26\1\277"+
    "\22\26\24\0\1\26\5\0\1\26\3\0\4\26\1\300"+
    "\21\26\24\0\1\26\5\0\1\26\3\0\20\26\1\301"+
    "\5\26\24\0\1\26\5\0\1\26\3\0\20\26\1\302"+
    "\5\26\24\0\1\26\5\0\1\26\3\0\2\26\1\303"+
    "\23\26\24\0\1\26\5\0\1\26\3\0\4\26\1\304"+
    "\21\26\24\0\1\26\5\0\1\26\3\0\13\26\1\305"+
    "\12\26\24\0\1\26\5\0\1\26\3\0\2\26\1\306"+
    "\23\26\24\0\1\26\5\0\1\26\3\0\3\26\1\307"+
    "\22\26\24\0\1\26\5\0\1\26\3\0\4\26\1\310"+
    "\21\26\24\0\1\26\5\0\1\26\3\0\20\26\1\311"+
    "\5\26\24\0\1\26\5\0\1\26\3\0\4\26\1\312"+
    "\21\26\24\0\1\26\5\0\1\26\3\0\4\26\1\313"+
    "\21\26\24\0\1\26\5\0\1\26\3\0\3\26\1\314"+
    "\22\26\24\0\1\26\5\0\1\26\3\0\14\26\1\315"+
    "\11\26\24\0\1\26\5\0\1\26\3\0\13\26\1\316"+
    "\12\26\24\0\1\26\5\0\1\26\3\0\16\26\1\317"+
    "\7\26\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7540];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\2\1\1\11\4\1\2\11"+
    "\4\1\2\11\21\1\3\11\1\0\1\11\2\1\4\11"+
    "\2\1\1\11\1\1\3\11\1\1\1\11\36\1\3\11"+
    "\40\1\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TestLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 82: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 83: break;
          case 3:
            { return TestTypes.COMMENT;
            }
          // fall through
          case 84: break;
          case 4:
            { return TestTypes.MOD;
            }
          // fall through
          case 85: break;
          case 5:
            { return TestTypes.PAREN_OPEN;
            }
          // fall through
          case 86: break;
          case 6:
            { return TestTypes.PAREN_CLOSE;
            }
          // fall through
          case 87: break;
          case 7:
            { return TestTypes.MUL;
            }
          // fall through
          case 88: break;
          case 8:
            { return TestTypes.ADD;
            }
          // fall through
          case 89: break;
          case 9:
            { return TestTypes.COMMA;
            }
          // fall through
          case 90: break;
          case 10:
            { return TestTypes.SUB;
            }
          // fall through
          case 91: break;
          case 11:
            { return TestTypes.DOT;
            }
          // fall through
          case 92: break;
          case 12:
            { return TestTypes.DIV;
            }
          // fall through
          case 93: break;
          case 13:
            { return TestTypes.INTEGER;
            }
          // fall through
          case 94: break;
          case 14:
            { return TestTypes.COLON;
            }
          // fall through
          case 95: break;
          case 15:
            { return TestTypes.SEMI;
            }
          // fall through
          case 96: break;
          case 16:
            { return TestTypes.LT;
            }
          // fall through
          case 97: break;
          case 17:
            { return TestTypes.ASSIGN;
            }
          // fall through
          case 98: break;
          case 18:
            { return TestTypes.GT;
            }
          // fall through
          case 99: break;
          case 19:
            { return TestTypes.IDENT;
            }
          // fall through
          case 100: break;
          case 20:
            { return TestTypes.BRACKET_OPEN;
            }
          // fall through
          case 101: break;
          case 21:
            { return TestTypes.BRACKET_CLOSE;
            }
          // fall through
          case 102: break;
          case 22:
            { return TestTypes.POW;
            }
          // fall through
          case 103: break;
          case 23:
            { return TestTypes.CURLY_OPEN;
            }
          // fall through
          case 104: break;
          case 24:
            { return TestTypes.CURLY_CLOSE;
            }
          // fall through
          case 105: break;
          case 25:
            { return TestTypes.NOT_EQUALS;
            }
          // fall through
          case 106: break;
          case 26:
            { return TestTypes.STRING;
            }
          // fall through
          case 107: break;
          case 27:
            { return TestTypes.MOD_ASSIGN;
            }
          // fall through
          case 108: break;
          case 28:
            { return TestTypes.MUL_ASSIGN;
            }
          // fall through
          case 109: break;
          case 29:
            { return TestTypes.ADD_ASSIGN;
            }
          // fall through
          case 110: break;
          case 30:
            { return TestTypes.SUB_ASSIGN;
            }
          // fall through
          case 111: break;
          case 31:
            { return TestTypes.REAL;
            }
          // fall through
          case 112: break;
          case 32:
            { return TestTypes.IDIV;
            }
          // fall through
          case 113: break;
          case 33:
            { return TestTypes.DIV_ASSIGN;
            }
          // fall through
          case 114: break;
          case 34:
            { return TestTypes.SAL;
            }
          // fall through
          case 115: break;
          case 35:
            { return TestTypes.LEQ;
            }
          // fall through
          case 116: break;
          case 36:
            { return TestTypes.EQUALS;
            }
          // fall through
          case 117: break;
          case 37:
            { return TestTypes.GEQ;
            }
          // fall through
          case 118: break;
          case 38:
            { return TestTypes.SAR;
            }
          // fall through
          case 119: break;
          case 39:
            { return TestTypes.POW_ASSIGN;
            }
          // fall through
          case 120: break;
          case 40:
            { return TestTypes.DO;
            }
          // fall through
          case 121: break;
          case 41:
            { return TestTypes.IF;
            }
          // fall through
          case 122: break;
          case 42:
            { return TestTypes.IN;
            }
          // fall through
          case 123: break;
          case 43:
            { return TestTypes.OR;
            }
          // fall through
          case 124: break;
          case 44:
            { return TestTypes.IDIV_ASSIGN;
            }
          // fall through
          case 125: break;
          case 45:
            { return TestTypes.SAL_ASSIGN;
            }
          // fall through
          case 126: break;
          case 46:
            { return TestTypes.SAR_ASSIGN;
            }
          // fall through
          case 127: break;
          case 47:
            { return TestTypes.SLR;
            }
          // fall through
          case 128: break;
          case 48:
            { return TestTypes.AND;
            }
          // fall through
          case 129: break;
          case 49:
            { return TestTypes.FOR;
            }
          // fall through
          case 130: break;
          case 50:
            { return TestTypes.NOT;
            }
          // fall through
          case 131: break;
          case 51:
            { return TestTypes.TRY;
            }
          // fall through
          case 132: break;
          case 52:
            { return TestTypes.VAR;
            }
          // fall through
          case 133: break;
          case 53:
            { return TestTypes.XOR;
            }
          // fall through
          case 134: break;
          case 54:
            { return TestTypes.BLOCK_COMMENT;
            }
          // fall through
          case 135: break;
          case 55:
            { return TestTypes.SLR_ASSIGN;
            }
          // fall through
          case 136: break;
          case 56:
            { return TestTypes.ELSE;
            }
          // fall through
          case 137: break;
          case 57:
            { return TestTypes.NULL;
            }
          // fall through
          case 138: break;
          case 58:
            { return TestTypes.THEN;
            }
          // fall through
          case 139: break;
          case 59:
            { return TestTypes.THIS;
            }
          // fall through
          case 140: break;
          case 60:
            { return TestTypes.TRUE;
            }
          // fall through
          case 141: break;
          case 61:
            { return TestTypes.BREAK;
            }
          // fall through
          case 142: break;
          case 62:
            { return TestTypes.CATCH;
            }
          // fall through
          case 143: break;
          case 63:
            { return TestTypes.CLASS;
            }
          // fall through
          case 144: break;
          case 64:
            { return TestTypes.CONST;
            }
          // fall through
          case 145: break;
          case 65:
            { return TestTypes.FALSE;
            }
          // fall through
          case 146: break;
          case 66:
            { return TestTypes.SUPER;
            }
          // fall through
          case 147: break;
          case 67:
            { return TestTypes.THROW;
            }
          // fall through
          case 148: break;
          case 68:
            { return TestTypes.WHILE;
            }
          // fall through
          case 149: break;
          case 69:
            { return TestTypes.NATIVE;
            }
          // fall through
          case 150: break;
          case 70:
            { return TestTypes.PUBLIC;
            }
          // fall through
          case 151: break;
          case 71:
            { return TestTypes.RETURN;
            }
          // fall through
          case 152: break;
          case 72:
            { return TestTypes.STATIC;
            }
          // fall through
          case 153: break;
          case 73:
            { return TestTypes.TYPEOF;
            }
          // fall through
          case 154: break;
          case 74:
            { return TestTypes.PRIVATE;
            }
          // fall through
          case 155: break;
          case 75:
            { return TestTypes.ABSTRACT;
            }
          // fall through
          case 156: break;
          case 76:
            { return TestTypes.CONTINUE;
            }
          // fall through
          case 157: break;
          case 77:
            { return TestTypes.FUNCTION;
            }
          // fall through
          case 158: break;
          case 78:
            { return TestTypes.NAMESPACE;
            }
          // fall through
          case 159: break;
          case 79:
            { return TestTypes.PROTECTED;
            }
          // fall through
          case 160: break;
          case 80:
            { return TestTypes.OVERRIDDEN;
            }
          // fall through
          case 161: break;
          case 81:
            { return TestTypes.CONSTRUCTOR;
            }
          // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
